?curl
?curlGetHeaders
download.file("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data", destfile = "data/wine.data", method = "curl")
download.file("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.names", destfile = "data/wine.names", method = "curl")
df <- read.table("data/wine.data")
df
str(df)
df <- read.table("data/wine.data", sep = ",")
str(df)
df.names <- read.table("data/wine.names")
head(df)
df <- read.table("data/wine.data", sep = ",")
df
head(df)
df <- read.table("data/wine.data", sep = ",", header = TRUE)
head(df)
str(df)
write.csv(x = df, "data/wine.data2")
write.csv(x = df, "data/wine.data2", row.names = FALSE)
df <- read.table("data/wine.data")
df <- read.table("data/wine.data", header = TRUE)
df <- read.table("data/wine.data", header = TRUE, sep=",")
df
str(df)
df <- read.table("data/wine.data", header = TRUE, sep=",")
df <- read.table("data/wine.data", header = TRUE, sep=",")
df <- read.table("../data/wine.data", header = TRUE, sep=",")
head(df)
dfNoTeacher <- df[,2:]
dfNoTeacher <- df[,2:end]
dfNoTeacher <- df[,2:-1]
dfNoTeacher <- df[,2]
dfNoTeacher <- df[,2:12]
dfNoTeacher <- df[,2:12]
dfNoTeacher <- df[,2:]
ncol(df)
ncol(dfNoTeacher)
ncol(df)
dfNoTeacher <- df[,2:14]
dfNoTeacher <- df[,2:14]
wineK3 <- kmeans(x = dfNoTeacher, centers = 3)
wineK3
str(wineK3)
wineK3
wineK3["cluster"]
class(wineK3)
wineK3["centers"]
wineK3 <- kmeans(x = dfNoTeacher, centers = 3)
wineK3
require(useful)
plot(wineK3, data=df, class="Cultivar")
require(useful)
plot(wineK3, data=dfNoTeacher)
wineGrid <- FitKMeans(x=dfNoTeacher, max.clusters = 20L, nstart = 30, iter.max = 20L)
wineGrid <- FitKMeans(x=dfNoTeacher, max.clusters = 20L, nstart = 30, iter.max = 20L)
wineGrid
wineGrid <- FitKMeans(x=dfNoTeacher, max.clusters = 20L, nstart = 30, iter.max = 20L)
wineGrid
PlotHartigan(wineGrid)
wineK15 <- kmeans(x = dfNoTeacher, centers = 15)
plot(wineK15, data=dfNoTeacher)
indicators <- c("BX.KLT.DINV.WD.GD.ZS", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.MKTP.CD", "NY.GDP.MKTP.KD.ZG",
"NY.GDP.PCAP.CD", "NY.GDP.PCAP.KD.ZG",
"TG.VAL.TOTL.GD.ZS")
require(WDI)
# リストの中にあるすべての国のインジケータを引っ張ってくる
# すべての国が各指標を持ってはいない
# いくつかの国はデータが全くない
wbInfo <- WDI(country = "all" , indicator = indicators , start = 2011 ,
end = 2011 , extra = TRUE)
install.packages("WDI")
indicators <- c("BX.KLT.DINV.WD.GD.ZS", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.MKTP.CD", "NY.GDP.MKTP.KD.ZG",
"NY.GDP.PCAP.CD", "NY.GDP.PCAP.KD.ZG",
"TG.VAL.TOTL.GD.ZS")
require(WDI)
# リストの中にあるすべての国のインジケータを引っ張ってくる
# すべての国が各指標を持ってはいない
# いくつかの国はデータが全くない
wbInfo <- WDI(country = "all" , indicator = indicators , start = 2011 ,
end = 2011 , extra = TRUE)
# 集約した情報を除く
wbInfo <- wbInfo[wbInfo$region != "Aggregates" ,]
# すべてのインジケータがNAの国を除く
wbInfo <- wbInfo[which(rowSums(!is.na(wbInfo[, indicators]))  0) ,]
wbInfo
wbInfo <- wbInfo[wbInfo$region != "Aggregates" ,]
wbInfo <- wbInfo[which(rowSums(!is.na(wbInfo[, indicators]))  0) ,]
indicators <- c("BX.KLT.DINV.WD.GD.ZS", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.MKTP.CD", "NY.GDP.MKTP.KD.ZG",
"NY.GDP.PCAP.CD", "NY.GDP.PCAP.KD.ZG",
"TG.VAL.TOTL.GD.ZS")
require(WDI)
# リストの中にあるすべての国のインジケータを引っ張ってくる
# すべての国が各指標を持ってはいない
# いくつかの国はデータが全くない
wbInfo <- WDI(country = "all" , indicator = indicators , start = 2011 ,
end = 2011 , extra = TRUE)
# 集約した情報を除く
wbInfo <- wbInfo[wbInfo$region != "Aggregates" ,]
# すべてのインジケータがNAの国を除く
wbInfo <- wbInfo[which(rowSums(!is.na(wbInfo[, indicators])) > 0) ,]
# ISOが無い行を除く
wbInfo <- wbInfo[!is.na(wbInfo$iso2c) ,]
head(wbInfo)
str(wbInfo)
unique(wbInfo$year)
is.na(wbInfo)
which(is.na(wbInfo))
wbInfo[583]
583/ncol(wbInfo)
int(583/ncol(wbInfo))
as.integer(583/ncol(wbInfo))
wbInfo[34,]
wbInfo[1,]
head(wbInfo)
wbInfo[1:34,]
as.factor("asdf")
factor("asdf")
indicators <- c("BX.KLT.DINV.WD.GD.ZS", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.MKTP.CD", "NY.GDP.MKTP.KD.ZG",
"NY.GDP.PCAP.CD", "NY.GDP.PCAP.KD.ZG",
"TG.VAL.TOTL.GD.ZS")
require(WDI)
# リストの中にあるすべての国のインジケータを引っ張ってくる
# すべての国が各指標を持ってはいない
# いくつかの国はデータが全くない
wbInfo <- WDI(country = "all" , indicator = indicators , start = 2011 ,
end = 2011 , extra = TRUE)
# 集約した情報を除く
wbInfo <- wbInfo[wbInfo$region != "Aggregates" ,]
# すべてのインジケータがNAの国を除く
wbInfo <- wbInfo[which(rowSums(!is.na(wbInfo[, indicators])) > 0) ,]
# ISOが無い行を除く
wbInfo <- wbInfo[!is.na(wbInfo$iso2c) ,]
# 国名を知ることができるようにrownamesを設定する
rownames(wbInfo) <- wbInfo$iso2c
# 地域を再度ファクター型に、収入や貸付は水準の変化を考慮する
wbInfo$region <- factor(wbInfo$region)
wbInfo$income <- factor(wbInfo$income)
wbInfo$lending <- factor(wbInfo$lending)
str(wbInfo)
names(wbInfo)
# 保持する列を見つける
keep.cols <- which(!names(wbInfo) %in% c("iso2c" , "country" , "year" ,
"capital" , "iso3c"))
# クラスタリングを適応
wbPam <- pam(x = wbInfo[, keep.cols] , k = 12 , keep.diss = TRUE ,
keep.data = TRUE)
# 保持する列を見つける
keep.cols <- which(!names(wbInfo) %in% c("iso2c" , "country" , "year" ,
"capital" , "iso3c"))
require(cluster)
# クラスタリングを適応
wbPam <- pam(x = wbInfo[, keep.cols] , k = 12 , keep.diss = TRUE ,
keep.data = TRUE)
# medoidデータを確認
wbPam$medoids
wbPam
# 保持する列を見つける
keep.cols <- which(!names(wbInfo) %in% c("iso2c" , "country" , "year" ,
"capital" , "iso3c"))
require(cluster)
# クラスタリングを適応
wbPam <- pam(x = wbInfo[, keep.cols] , k = 3 , keep.diss = TRUE ,
keep.data = TRUE)
# medoidデータを確認
wbPam$medoids
str(wbPam)
plot(wbPam)
plot(wbPam)
plot(wbPam, which.plots = 2)
plot(wbPam, which.plots = 2)
download.file(url = "http://jaredlander.com/data/worldmap.zip" ,
destfile = "data/worldmap.zip" , method = "curl")
unzip(zipfile = "../data/worldmap.zip")
download.file(url = "http://jaredlander.com/data/worldmap.zip" ,
destfile = "../data/worldmap.zip" , method = "curl")
unzip(zipfile = "data/worldmap.zip")
unzip(zipfile = "data/worldmap.zip", exdir="zip")
require(maptools)
world <- readShapeSpatial(
"../data/world_country_admin_boundary_shapefile_with_fips_codes.shp"
)
install.packages("maptools")
require(maptools)
world <- readShapeSpatial(
"../data/world_country_admin_boundary_shapefile_with_fips_codes.shp"
)
head(world)
head(world@map)
head(world@data)
wineH <- hclust(d = dist(wineTrain))
df <- read.table("../data/wine.data", header = TRUE, sep=",")
head(df)
dfNoTeacher <- df[,2:14]
wineK3 <- kmeans(x = dfNoTeacher, centers = 3)
wineK3
require(useful)
plot(wineK3, data=dfNoTeacher)
wineGrid <- FitKMeans(x=dfNoTeacher, max.clusters = 20L, nstart = 30, iter.max = 20L)
wineGrid
PlotHartigan(wineGrid)
wineK15 <- kmeans(x = dfNoTeacher, centers = 15)
plot(wineK15, data=dfNoTeacher)
indicators <- c("BX.KLT.DINV.WD.GD.ZS", "NY.GDP.DEFL.KD.ZG",
"NY.GDP.MKTP.CD", "NY.GDP.MKTP.KD.ZG",
"NY.GDP.PCAP.CD", "NY.GDP.PCAP.KD.ZG",
"TG.VAL.TOTL.GD.ZS")
require(WDI)
# リストの中にあるすべての国のインジケータを引っ張ってくる
# すべての国が各指標を持ってはいない
# いくつかの国はデータが全くない
wbInfo <- WDI(country = "all" , indicator = indicators , start = 2011 ,
end = 2011 , extra = TRUE)
# 集約した情報を除く
wbInfo <- wbInfo[wbInfo$region != "Aggregates" ,]
# すべてのインジケータがNAの国を除く
wbInfo <- wbInfo[which(rowSums(!is.na(wbInfo[, indicators])) > 0) ,]
# ISOが無い行を除く
wbInfo <- wbInfo[!is.na(wbInfo$iso2c) ,]
# 国名を知ることができるようにrownamesを設定する
rownames(wbInfo) <- wbInfo$iso2c
# 地域を再度ファクター型に、収入や貸付は水準の変化を考慮する
wbInfo$region <- factor(wbInfo$region)
wbInfo$income <- factor(wbInfo$income)
wbInfo$lending <- factor(wbInfo$lending)
# 保持する列を見つける
keep.cols <- which(!names(wbInfo) %in% c("iso2c" , "country" , "year" ,
"capital" , "iso3c"))
require(cluster)
# クラスタリングを適応
wbPam <- pam(x = wbInfo[, keep.cols] , k = 3 , keep.diss = TRUE ,
keep.data = TRUE)
# medoidデータを確認
wbPam$medoids
plot(wbPam, which.plots = 2)
wineH <- hclust(d = dist(wineTrain))
wineH <- hclust(d = dist(dfNoTeacher))
plot(wineH)
rect.hclust(wineH , k = 3 , border = "red")
plot(wineH)
rect.hclust(wineH , k = 3 , border = "red")
plot(wineH)
rect.hclust(wineH , k = 3 , border = "blue")
plot(wineH)
rect.hclust(wineH , h = 3 , border = "blue")
plot(wineH)
rect.hclust(wineH , h = 800 , border = "blue")
cutree(wineH)
cutree(wineH, k=3)
g24 <- cutree(wineH, k = c(2,4))
table(grp2 = g24[,"2"], grp4 = g24[,"4"])
cutree(wineH, k=3)
cutree(wineH, k=3)
# 高さを指定する方法
plot(wineH)
rect.hclust(wineH , h = 800 , border = "blue")
cutree(wineH, k=3)
which(!names(wbInfo) %in% c("iso2c" , "country" , "year" ,
"capital" , "iso3c"))
c(1,2,3) %in% c(3,4,5,6)
in
? %in%
col.keep
keep.cols
install.packages("bigrquery")
df <- read.table("~/Downloads/results-20160817-224325.csv")
df <- read.table("~/Downloads/results-20160817-224325.csv", header = TRUE)
df <- read.table("~/Downloads/results-20160817-224325.csv", header = TRUE, sep=",")
df
str(df)
summary(df)
df[, "track_id"]
df[, "subscription_status"]
df[, "subscription_status"] <- factor(df[, "subscription_status"] )
df[, "subscription_type"] <- factor(df[, "subscription_type"] )
df
summary(df)
kmeans(df)
kmeans(df, c=3)
kmeans(df, centers = 3)
pam(df, k=3, keep.diss = TRUE, keep.data = TRUE)
userPam<- pam(df, k=3, keep.diss = TRUE, keep.data = TRUE)
userPam$medoids
df$user_id
userPam$medoids
df <- df[, 2:ncol(df)]
userPam<- pam(df, k=3, keep.diss = TRUE, keep.data = TRUE)
userPam$medoids
plot(userPam)
plot(userPam, which.plots=2)
summary(userPam)
userPam$clusinfo
str(userPam)
userPam$clustering
k1 <- which(userPam$clustering==1)
k1
k2 <- which(userPam$clustering==2)
k3 <- which(userPam$clustering==3)
df1 <- df[k1,]
df2 <- df[k2,]
df3 <- df[k3,]
summary(df1)
df <- read.table("~/Downloads/results-20160817-224325.csv", header = TRUE, sep=",")
df[, "subscription_status"] <- factor(df[, "subscription_status"] )
df[, "subscription_type"] <- factor(df[, "subscription_type"] )
userPam<- pam(df, k=3, keep.diss = TRUE, keep.data = TRUE)
k1 <- which(userPam$clustering==1)
k2 <- which(userPam$clustering==2)
k3 <- which(userPam$clustering==3)
df1 <- df[k1,]
df2 <- df[k2,]
df3 <- df[k3,]
summary(df1)
summary(df2)
summary(df3)
table(df1)
df1
require(cluster)
df <- read.table("~/Downloads/results-20160817-224325.csv", header = TRUE, sep=",")
df[, "subscription_status"] <- factor(df[, "subscription_status"] )
df[, "subscription_type"] <- factor(df[, "subscription_type"] )
userPam<- pam(df, k=3, keep.diss = TRUE, keep.data = TRUE)
k1 <- which(userPam$clustering==1)
k2 <- which(userPam$clustering==2)
k3 <- which(userPam$clustering==3)
df1 <- df[k1,]
df2 <- df[k2,]
df3 <- df[k3,]
summary(df1)
summary(df2)
summary(df3)
df1
tmp <- summary(df1)
tmp
class(tmp)
as.data.frame(tmp)
df
names(df)
tmp <- df[, c("platform", "artist_id")]
kmeans(df, k=3)
kmeans(df, c=3)
tmp
is.na(tmp)
tmp <- na.omit(tmp)
kmeans(df, c=3)
kmeans(tmp, c=3)
tmp <- nan.omit(tmp)
summary(tmp)
kmeans(tmp, c=3)
a<-c("a", "aa", "bb")
b<-c("asdf", "asdfasdf", "ffff")
tmp <- data.frame(a,b)
tmp
kmeans(tmp, c=3)
kmeans(tmp, c=2)
df
